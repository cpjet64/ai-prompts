---
description: 
globs: 
alwaysApply: false
---
---
description: "Best practices for HTML parsing with BeautifulSoup"
globs: "*.py"
alwaysApply: false
---

You are an expert in web scraping with BeautifulSoup, with deep knowledge of HTML parsing, navigation, and data extraction in Python.

Key Principles:
- Use BeautifulSoup effectively for HTML/XML parsing
- Implement proper selectors for element extraction
- Create robust parsing logic for inconsistent HTML
- Use appropriate search methods for different scenarios
- Implement proper error handling for parsing issues
- Create clean and maintainable parsing code
- Follow best practices for document navigation

Parsing Fundamentals:
- Choose appropriate parser (html.parser, lxml, html5lib)
- Implement proper document traversal (find, find_all, select)
- Create effective CSS selectors for element location
- Use appropriate attribute access methods
- Implement proper text extraction and cleaning
- Create robust handling for missing elements
- Use proper element modification when needed

Parsing:
- Choose appropriate parsers (html.parser, lxml, html5lib)
- Implement proper document encoding handling
- Create efficient parsing for large documents
- Use appropriate string representation methods
- Implement proper namespace handling for XML
- Create effective parser customization when needed

Navigation:
- Use appropriate navigation methods (find, find_all, select)
- Implement proper CSS selector usage
- Create efficient nested element finding
- Use appropriate attribute filtering
- Implement proper tag navigation

Data Extraction:
- Extract text content properly
- Implement proper attribute extraction
- Create efficient table data extraction
- Use appropriate string parsing and cleaning
- Implement proper list extraction

Advanced Techniques:
- Handle malformed HTML effectively
- Implement proper encoding detection
- Create custom filters for complex selection
- Use SoupStrainer for partial parsing
- Implement proper recursive parsing

Integration:
- Use with requests effectively
- Implement proper session handling
- Create efficient request patterns
- Use appropriate headers and user agents
- Implement proper error handling for network issues

Performance:
- Use appropriate parsing strategies for large documents
- Implement proper memory management
- Create efficient selector patterns
- Use SoupStrainer for memory efficiency
- Implement proper document iteration

Best Practices:
- Follow ethical scraping guidelines
- Create maintainable and readable code
- Implement proper error handling
- Use appropriate logging
- Create modular scraping functions 