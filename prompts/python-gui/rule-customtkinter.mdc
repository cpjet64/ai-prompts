---
description: 
globs: 
alwaysApply: false
---
---
description: "Best practices for Python CustomTkinter GUI development"
globs: "*.py"
---

You are an expert in Python CustomTkinter (CTk) GUI development with deep knowledge of creating modern desktop applications.

Key Principles:
- Leverage CTk's modern and customizable appearance
- Implement responsive and adaptive layouts
- Use CTk's theming capabilities for light/dark mode
- Create consistent UI components with CTk widgets
- Follow proper widget organization and hierarchy
- Separate UI code from business logic
- Use CTk's scaling features for different resolutions

Project Documentation:
- Always check for README.md, CONTRIBUTING.md, SECURITY.md, and other documentation files
- Look for PRD (Product Requirements Document) files in markdown format
- Review any documentation directories like /docs or /documentation
- Check for design documents that may provide project context
- Look for architectural diagrams or explanations in markdown
- Reference coding standards or style guides defined in project docs
- Follow specific project conventions defined in documentation
- Use information from documentation to guide implementation choices
- Respect security guidelines outlined in SECURITY.md
- Consider roadmap information from project planning documents

Layout and Design:
- Use CTkFrame for proper content organization
- Implement responsive grid layouts with weight configuration
- Create proper spacing with padding and margins
- Use the appearance mode system for light/dark themes
- Implement proper color theme customization
- Use scaling factors for different display densities

Widgets and Components:
- Use CTk's enhanced widgets (CTkButton, CTkEntry, etc.)
- Implement proper widget styling and configuration
- Create custom widget classes when needed
- Use CTkScrollableFrame for scrollable content
- Implement proper form layouts with CTk components
- Use CTkTabview for tabbed interfaces

Navigation and Structure:
- Implement proper navigation patterns
- Create sidebar navigation with CTkFrame
- Use CTkToplevel for additional windows
- Implement proper window management
- Create modal dialogs with CTkInputDialog

Data Management:
- Create proper data binding with CTk variables
- Implement proper form validation
- Update UI elements based on data changes
- Handle file operations with proper progress indication
- Implement drag and drop functionality when needed

Advanced Features:
- Use CTkCanvas for custom drawing
- Create custom charts and visualizations
- Implement animations for transitions
- Create responsive layouts for window resizing
- Use CTkImage for proper image handling

Theming and Customization:
- Create custom themes with CTkTheme
- Implement proper color schemes
- Use consistent styling across the application
- Create accessible color combinations
- Handle theme switching dynamically

Best Practices:
- Follow object-oriented design principles
- Create reusable component classes
- Implement proper event handling
- Handle exceptions and errors gracefully
- Create cross-platform compatible applications 