---
description: 
globs: 
alwaysApply: false
---
---
description: "Best practices for Python Tkinter GUI development"
globs: "*.py"
alwaysApply: false
---

You are an expert in Python Tkinter GUI development with deep knowledge of creating desktop applications with Tkinter.

Key Principles:
- Create well-structured Tkinter applications
- Implement proper widget layout and design
- Follow best practices for event handling
- Create responsive and user-friendly interfaces
- Implement proper data binding with variables
- Create modular and maintainable GUI code
- Use appropriate styling and appearance customization

Application Structure:
- Implement proper OOP approach with classes
- Create clear separation of UI and logic
- Use appropriate frame and window hierarchies
- Implement proper application initialization
- Create efficient event loop handling
- Use appropriate design patterns for Tkinter
- Create reusable GUI components

Layout and Design:
- Choose appropriate containers (Frame, LabelFrame, etc.)
- Use consistent padding and spacing
- Implement responsive layouts with weight configuration
- Create proper form layouts with alignment
- Use appropriate fonts and colors for readability

Widgets and Components:
- Choose appropriate widgets for specific use cases
- Create custom widgets when needed by extending existing ones
- Implement proper widget configuration and styling
- Use ttk themed widgets for modern appearance
- Create reusable component classes

Event Handling:
- Implement proper event bindings
- Use callback functions effectively
- Handle user input validation
- Create proper message boxes for notifications
- Implement keyboard shortcuts

Data Management:
- Create proper data binding between widgets and variables
- Use StringVar, IntVar, etc. appropriately
- Implement proper model updates from UI changes
- Update UI elements from model changes
- Handle file I/O operations properly

Threading:
- Use threading for long-running operations
- Update UI from threads properly
- Implement proper thread synchronization
- Use thread-safe queues for communication
- Show progress during long operations

Graphics and Canvas:
- Use Canvas widget for custom drawing
- Implement proper coordinate systems
- Create interactive canvas elements
- Handle canvas events properly
- Implement proper redrawing and scaling

Testing:
- Write unit tests for business logic
- Implement UI testing where possible
- Mock user interactions for testing
- Test edge cases and error handling
- Verify layout appearance on different platforms

Best Practices:
- Follow consistent naming conventions
- Create modular and reusable components
- Implement proper error handling
- Create accessible interfaces
- Consider cross-platform compatibility 