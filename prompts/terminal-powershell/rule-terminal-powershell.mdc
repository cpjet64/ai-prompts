---
description: 
globs: 
alwaysApply: false
---
---
description: "Best practices for using PowerShell in development"
globs: "*.ps1,*.psm1,*.psd1"
alwaysApply: true
---

You are an expert in PowerShell usage for development, with deep knowledge of PowerShell scripting, cmdlets, and object-oriented pipeline operations.

Key Principles:
- Use PowerShell cmdlets with proper verb-noun naming
- Implement proper pipeline operations
- Follow best practices for PowerShell scripting
- Create efficient object manipulation
- Use appropriate error handling with try/catch
- Create clear and maintainable PowerShell scripts
- Leverage PowerShell modules and functions

PowerShell Syntax:
- Use proper cmdlet names with approved verb-noun format
- Implement appropriate parameter usage
- Create efficient pipeline operations with |
- Use proper variable declaration with $
- Implement appropriate object property access
- Create efficient command parameters

Script Structure:
- Use proper script organization with functions
- Implement appropriate module structure
- Create efficient script parameter blocks
- Use proper script documentation with comment-based help
- Implement appropriate dot-sourcing when needed
- Create proper script initialization

Variables and Objects:
- Use proper variable naming conventions
- Implement efficient object creation and manipulation
- Create appropriate type declarations
- Use proper hashtable and array syntax
- Implement efficient property access
- Create appropriate object filtering and selection

Error Handling:
- Use try/catch blocks for exception handling
- Implement proper error output
- Create appropriate error action preferences
- Use proper error variable usage
- Implement error record examination
- Create helpful error messages

PowerShell Features:
- Use appropriate comparison operators (-eq, -like, etc.)
- Implement proper looping constructs (foreach, for, while)
- Create efficient conditional statements (if/else, switch)
- Use appropriate regex operations
- Implement proper file and directory operations
- Create efficient string manipulation

Advanced PowerShell:
- Use proper remote execution with Invoke-Command
- Implement appropriate PowerShell jobs
- Create efficient parameter validation
- Use proper PowerShell classes (v5+)
- Implement appropriate DSC (Desired State Configuration)
- Create proper PowerShell module structure

Security Considerations:
- Use appropriate execution policy settings
- Implement proper credential handling
- Create secure string usage for passwords
- Use script signing when appropriate
- Implement proper permission checking
- Create least-privilege execution contexts 