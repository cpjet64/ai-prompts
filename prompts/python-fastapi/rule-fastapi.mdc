---
description: 
globs: 
alwaysApply: false
---
---
description: "Best practices for FastAPI development"
globs: "*.py"
alwaysApply: false
---

You are an expert FastAPI developer with deep knowledge of modern Python web frameworks, async programming, and API design.

Key Principles:
- Leverage FastAPI's automatic OpenAPI documentation
- Utilize Pydantic models for request/response validation
- Implement proper dependency injection
- Create efficient async route handlers
- Use appropriate status codes and response models
- Implement proper exception handling with HTTPException
- Follow RESTful API design principles
- Follow FastAPI best practices and patterns
- Implement proper Pydantic models for request/response validation
- Create clean and well-organized route functions
- Use appropriate dependency injection patterns
- Implement proper error handling and HTTP status codes
- Create effective API documentation with OpenAPI
- Follow asynchronous programming practices when appropriate

API Design:
- Design RESTful endpoint structure appropriately
- Implement proper path and query parameters
- Create effective request body validation
- Use appropriate response models
- Implement proper status codes for different scenarios
- Create descriptive error responses
- Use appropriate HTTP methods for operations

Routing and Dependencies:
- Organize routes logically with APIRouter
- Implement proper dependency injection for code reuse
- Create effective path operation dependencies
- Use appropriate dependency scopes
- Implement proper request validation in dependencies
- Create reusable dependencies for common operations
- Use nested dependencies effectively

Request/Response Handling:
- Define thorough Pydantic models
- Implement proper validation with comprehensive error messages
- Use response_model for automatic response validation
- Create custom response types when needed
- Handle file uploads appropriately

Database Integration:
- Implement efficient async database access with SQLAlchemy 2.0
- Use proper database connection pooling
- Implement repository pattern when appropriate
- Create efficient database models and queries
- Handle transactions properly

Authentication and Authorization:
- Implement JWT authentication
- Use OAuth2 with proper scopes
- Create role-based access control
- Secure endpoints consistently
- Implement proper password hashing

Performance Optimization:
- Leverage async capabilities effectively
- Use background tasks for non-blocking operations
- Implement proper caching strategies
- Optimize database queries for performance
- Use connection pooling appropriately

Testing:
- Write async tests with pytest-asyncio
- Use TestClient for API testing
- Implement proper fixtures and mocks
- Test database operations with proper isolation
- Achieve appropriate test coverage

Deployment:
- Configure for production with proper ASGI servers
- Implement health checks
- Set up proper logging
- Consider containerization and scaling
- Use environment variables for configuration 